#include <iostream>
using namespace std;
/*
Классы памяти c++
static - переменная инициализируется автоматически, не нужно дополнитьельно инициализировать
Регистровая - переменные будут обрабатываться как можно быстрее (могут быть только целочисленные переменные), типа храниться в регистре, но не факт
Внешняя - (глобальная (extern - берётся из другого файла))
*/

// Пример
void func(void) {
    // x будет инициализирована только при первом вызове.
    // значение y будет всегда делать 1 и 1++
    // значение x будет постоянно увеличиваться
    static int x = 1; // храниться в data сигменте 
    int y = 1; // храниться в стеке

    cout << x++ << "" << y++ << "/n";
}

/*
Рекурсивная функция (функция вызывает сама себя)

1) Постепенно сводим задачу к базовой.
2) Выполняем базовую задачу.

ВАЖНО! Глубина рекурсии не может быть бесконечной, закончиться память!
*/

// Пример1
void pop();
void pop1(int i);

int main() {
    pop1(1);

    return 0;
}

void pop() {
    pop();
    cout << "Собака была...";
}

void pop1(int i) {
    cout << "Собака была...";

    if (i == 10) {
        return;
    }

    pop1(i + 1);
}

/*
Формы рекурсиных функций


*/